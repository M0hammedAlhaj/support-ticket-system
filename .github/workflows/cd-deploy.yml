name: CD - Deploy Services

on:
  push:
    branches:
      - master

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      auth-service: ${{ steps.changes.outputs.auth-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      gateway-service: ${{ steps.changes.outputs.gateway-service }}
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            auth-service:
              - 'auth-service/**'
            user-service:
              - 'user-service/**'
            gateway-service:
              - 'gateway-service/**'

      - name: Set services matrix
        id: set-services
        env:
          AUTH_CHANGED: ${{ steps.changes.outputs.auth-service }}
          USER_CHANGED: ${{ steps.changes.outputs.user-service }}
          GATEWAY_CHANGED: ${{ steps.changes.outputs.gateway-service }}
        run: |
          services="["
          if [[ "${AUTH_CHANGED}" == "true" ]]; then
            services="${services}\"auth-service\","
          fi
          if [[ "${USER_CHANGED}" == "true" ]]; then
            services="${services}\"user-service\","
          fi
          if [[ "${GATEWAY_CHANGED}" == "true" ]]; then
            services="${services}\"gateway-service\","
          fi
          services="${services%,}]"
          echo "services=${services}" >> $GITHUB_OUTPUT
          echo "Services to deploy: ${services}"

  deploy-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
      fail-fast: false
    steps:
      - name: Validate secrets
        run: |
          if [[ -z "${{ secrets.JUMPING_SERVER_HOST }}" ]]; then
            echo "❌ Error: JUMPING_SERVER_HOST secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.JUMPING_SERVER_USER }}" ]]; then
            echo "❌ Error: JUMPING_SERVER_USER secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.JUMPING_SERVER_SSH_KEY }}" ]]; then
            echo "❌ Error: JUMPING_SERVER_SSH_KEY secret is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"
          
      - name: Deploy ${{ matrix.service }}
        env:
          SERVICE_NAME: ${{ matrix.service }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.JUMPING_HOST }}
          username: ${{ secrets.JUMPING_USER }}
          key: ${{ secrets.JUMPING_KEY }}
          envs: SERVICE_NAME
          script: |
            ssh ${SERVICE_NAME} << 'EOF'
              cd /home/ubuntu/support-ticket-system
              docker compose pull ${SERVICE_NAME}
              docker compose up -d --build ${SERVICE_NAME}
              echo "✅ ${SERVICE_NAME} deployed successfully"
            EOF
