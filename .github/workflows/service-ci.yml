name: Service CI/CD

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: eclipse-temurin:21-jdk
    steps:
      - name: Install git and dependencies
        run: |
          apt-get update
          apt-get install -y git
          
      - uses: actions/checkout@v4
      
      - name: Verify files exist
        run: |
          ls -la
          ls -la ${{ inputs.service-name }}/
          ls -la ${{ inputs.service-name }}/gradle/wrapper/ || echo "Wrapper directory not found"
          
      - name: Build Service
        working-directory: ${{ inputs.service-name }}
        run: |
          chmod +x gradlew
          ./gradlew build -x test
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ inputs.service-name }}
          path: ${{ inputs.service-name }}/build/
          
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Test Service (with Testcontainers)
        working-directory: ${{ inputs.service-name }}
        run: |
          chmod +x gradlew
          ./gradlew test

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker Image
        run: |
          cd ${{ inputs.service-name }}
          docker build -t myorg/${{ inputs.service-name }}:build .
      
      - name: Save Docker Image
        run: |
          docker save myorg/${{ inputs.service-name }}:build -o /tmp/image.tar
      
      - name: Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ inputs.service-name }}
          path: /tmp/image.tar

  version:
    runs-on: ubuntu-latest
    needs: build-docker
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - id: version
        run: |
          VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  push:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Download Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ inputs.service-name }}
          path: /tmp
      
      - name: Load Docker Image
        run: docker load -i /tmp/image.tar
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Tag and Push
        run: |
          docker tag myorg/${{ inputs.service-name }}:build myorg/${{ inputs.service-name }}:${{ needs.version.outputs.version }}
          docker tag myorg/${{ inputs.service-name }}:build myorg/${{ inputs.service-name }}:latest
          docker push myorg/${{ inputs.service-name }}:${{ needs.version.outputs.version }}
          docker push myorg/${{ inputs.service-name }}:latest
